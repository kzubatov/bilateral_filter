#version 450

layout(constant_id = 0) const int WORK_GROUP_AXIS_SIZE = 16;
layout(constant_id = 1) const int WINDOW_R = 1;

layout(local_size_x = WORK_GROUP_AXIS_SIZE, local_size_y = WORK_GROUP_AXIS_SIZE) in;

layout(push_constant) uniform params_t
{
    uvec2 resolution;
    float gaussian_divisor;    // -1.0 / (2.0 * sigma_d * sigma_d)
    float intensities_divisor; // -1.0 / (2.0 * sigma_r * sigma_r) 
} params;

layout(binding = 0) uniform sampler2D srcImage;
layout(binding = 1, rgba8) uniform writeonly image2D dstImage;

const int WINDOW_LEN = WORK_GROUP_AXIS_SIZE + 2 * WINDOW_R;
shared vec3 window[WINDOW_LEN][WINDOW_LEN];

void main() {
    int row = int(gl_LocalInvocationIndex / WINDOW_LEN);
    int col = int(gl_LocalInvocationIndex % WINDOW_LEN);
    ivec2 coord = ivec2(gl_WorkGroupID.xy) * WORK_GROUP_AXIS_SIZE + ivec2(col - WINDOW_R, row - WINDOW_R);
    window[row][col] = textureLod(srcImage, (coord + 0.5) / params.resolution, 0).rgb;

    int idx = int(gl_LocalInvocationIndex + WORK_GROUP_AXIS_SIZE * WORK_GROUP_AXIS_SIZE);
    if (idx < WINDOW_LEN * WINDOW_LEN)
    {
        row = idx / WINDOW_LEN;
        col = idx % WINDOW_LEN;
        coord = ivec2(gl_WorkGroupID.xy) * WORK_GROUP_AXIS_SIZE + ivec2(col - WINDOW_R, row - WINDOW_R);
        window[row][col] = textureLod(srcImage, (coord + 0.5) / params.resolution, 0).rgb;
    }

    if (WORK_GROUP_AXIS_SIZE == 8)
    {
        idx += WORK_GROUP_AXIS_SIZE * WORK_GROUP_AXIS_SIZE;
        if (idx < WINDOW_LEN * WINDOW_LEN)
        {
            row = idx / WINDOW_LEN;
            col = idx % WINDOW_LEN;
            coord = ivec2(gl_WorkGroupID.xy) * WORK_GROUP_AXIS_SIZE + ivec2(col - WINDOW_R, row - WINDOW_R);
            window[row][col] = textureLod(srcImage, (coord + 0.5) / params.resolution, 0).rgb;
        }
    }

    barrier();

    if (all(lessThan(gl_GlobalInvocationID.xy, params.resolution))) {
        coord = ivec2(gl_LocalInvocationID.xy) + WINDOW_R;
        vec3 sum = window[coord.y][coord.x];
        float sum_w = 1.0, texel_w;

        for (int i = -WINDOW_R; i <= WINDOW_R; ++i)
        {
            for (int j = -WINDOW_R; j <= WINDOW_R; ++j)
            {
                if (i != 0 || j != 0)
                {
                    texel_w = exp((i * i + j * j) * params.gaussian_divisor 
                        + dot(window[coord.y + i][coord.x + j] - window[coord.y][coord.x], window[coord.y + i][coord.x + j] - window[coord.y][coord.x]) * params.intensities_divisor);
                    sum += texel_w * window[coord.y + i][coord.x + j];
                    sum_w += texel_w;
                }
            }
        }
        
        imageStore(dstImage, ivec2(gl_GlobalInvocationID.xy), vec4(sum / sum_w, 1.0));
    }
}